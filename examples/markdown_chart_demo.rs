//! Demo of Markdown and Chart rendering capabilities in Alchemist
//!
//! This example demonstrates:
//! - Creating and rendering markdown documents
//! - Creating and rendering various chart types
//! - Using the renderer API

use alchemist::{
    renderer::{RendererManager, RenderData},
    shell::AlchemistShell,
    config::AlchemistConfig,
};
use anyhow::Result;
use serde_json::json;
use std::fs;

#[tokio::main]
async fn main() -> Result<()> {
    // Initialize logging
    tracing_subscriber::fmt()
        .with_env_filter("alchemist=debug")
        .init();

    println!("=== Alchemist Markdown & Chart Demo ===\n");

    // Create config and shell
    let config = AlchemistConfig::default();
    let mut shell = AlchemistShell::new(config).await?;

    // Demo 1: Markdown Rendering
    println!("1. Creating Markdown Demo...");
    create_markdown_demo(&mut shell).await?;

    // Demo 2: Line Chart
    println!("\n2. Creating Line Chart Demo...");
    create_line_chart_demo(&mut shell).await?;

    // Demo 3: Bar Chart
    println!("\n3. Creating Bar Chart Demo...");
    create_bar_chart_demo(&mut shell).await?;

    // Demo 4: Pie Chart
    println!("\n4. Creating Pie Chart Demo...");
    create_pie_chart_demo(&mut shell).await?;

    // Demo 5: Combined Report
    println!("\n5. Creating Combined Report Demo...");
    create_combined_report_demo(&mut shell).await?;

    println!("\nAll demos launched! Press Ctrl+C to exit.");
    tokio::signal::ctrl_c().await?;

    Ok(())
}

async fn create_markdown_demo(shell: &mut AlchemistShell) -> Result<()> {
    let markdown_content = r#"# Alchemist Markdown Demo

Welcome to the **Alchemist** markdown rendering demonstration!

## Features Demonstrated

This document showcases various markdown features:

### Text Formatting
- **Bold text** for emphasis
- *Italic text* for style
- `Inline code` for technical terms
- ~~Strikethrough~~ for corrections

### Lists

#### Unordered List
- First item
- Second item
  - Nested item
  - Another nested item
- Third item

#### Ordered List
1. Step one
2. Step two
3. Step three

### Code Blocks

```rust
// Rust code example
fn main() {
    println!("Hello from Alchemist!");
    let result = calculate_something(42);
    println!("Result: {}", result);
}

fn calculate_something(x: i32) -> i32 {
    x * 2 + 10
}
```

```python
# Python code example
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# Calculate first 10 Fibonacci numbers
for i in range(10):
    print(f"F({i}) = {fibonacci(i)}")
```

### Tables

| Feature | Status | Priority |
|---------|--------|----------|
| Markdown Rendering | âœ… Complete | High |
| Chart Visualization | âœ… Complete | High |
| Real-time Updates | ðŸš§ In Progress | Medium |
| Export to PDF | ðŸ“‹ Planned | Low |

### Blockquotes

> "The best way to predict the future is to invent it."
> 
> â€” Alan Kay

### Links and References

- [Alchemist Documentation](https://github.com/thecowboyai/alchemist)
- [Markdown Guide](https://www.markdownguide.org/)
- [Iced Framework](https://github.com/iced-rs/iced)

### Mathematical Expressions

The quadratic formula: `x = (-b Â± âˆš(bÂ² - 4ac)) / 2a`

### Task Lists

- [x] Implement markdown parser
- [x] Add syntax highlighting
- [x] Create theme support
- [ ] Add export functionality
- [ ] Implement live preview

## Conclusion

This demonstration shows that Alchemist's markdown renderer supports:
- All standard markdown features
- Syntax highlighting for code blocks
- Tables with alignment
- Task lists
- And much more!

---

*Generated by Alchemist Markdown Demo*"#;

    // Save to file
    let demo_file = "demo_markdown.md";
    fs::write(demo_file, markdown_content)?;

    // Render with light theme
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Markdown {
        file: demo_file.to_string(),
        theme: "light".to_string(),
    }).await?;

    // Also render with dark theme
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Markdown {
        file: demo_file.to_string(),
        theme: "dark".to_string(),
    }).await?;

    Ok(())
}

async fn create_line_chart_demo(shell: &mut AlchemistShell) -> Result<()> {
    let chart_data = json!({
        "data": [
            {
                "name": "Revenue",
                "data": [
                    {"x": 1.0, "y": 1200.0, "label": "Jan"},
                    {"x": 2.0, "y": 1900.0, "label": "Feb"},
                    {"x": 3.0, "y": 3000.0, "label": "Mar"},
                    {"x": 4.0, "y": 2800.0, "label": "Apr"},
                    {"x": 5.0, "y": 4100.0, "label": "May"},
                    {"x": 6.0, "y": 4900.0, "label": "Jun"},
                ],
                "color": [0.2, 0.5, 1.0, 1.0]
            },
            {
                "name": "Expenses",
                "data": [
                    {"x": 1.0, "y": 800.0},
                    {"x": 2.0, "y": 1200.0},
                    {"x": 3.0, "y": 1800.0},
                    {"x": 4.0, "y": 2000.0},
                    {"x": 5.0, "y": 2500.0},
                    {"x": 6.0, "y": 3200.0},
                ],
                "color": [1.0, 0.3, 0.3, 1.0]
            },
            {
                "name": "Profit",
                "data": [
                    {"x": 1.0, "y": 400.0},
                    {"x": 2.0, "y": 700.0},
                    {"x": 3.0, "y": 1200.0},
                    {"x": 4.0, "y": 800.0},
                    {"x": 5.0, "y": 1600.0},
                    {"x": 6.0, "y": 1700.0},
                ],
                "color": [0.2, 0.8, 0.2, 1.0]
            }
        ],
        "options": {
            "title": "Financial Performance - H1 2024",
            "x_label": "Month",
            "y_label": "Amount ($)",
            "show_grid": true,
            "show_legend": true
        }
    });

    // Save to file
    let demo_file = "demo_line_chart.json";
    fs::write(demo_file, serde_json::to_string_pretty(&chart_data)?)?;

    // Render chart
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Chart {
        file: demo_file.to_string(),
        chart_type: "line".to_string(),
        title: Some("Financial Performance".to_string()),
    }).await?;

    Ok(())
}

async fn create_bar_chart_demo(shell: &mut AlchemistShell) -> Result<()> {
    let chart_data = json!({
        "data": [
            {
                "name": "Q1 Sales",
                "data": [
                    {"x": 0.0, "y": 45.0, "label": "Product A"},
                    {"x": 1.0, "y": 38.0, "label": "Product B"},
                    {"x": 2.0, "y": 52.0, "label": "Product C"},
                    {"x": 3.0, "y": 41.0, "label": "Product D"},
                ],
                "color": [0.3, 0.5, 0.9, 1.0]
            },
            {
                "name": "Q2 Sales",
                "data": [
                    {"x": 0.0, "y": 50.0},
                    {"x": 1.0, "y": 42.0},
                    {"x": 2.0, "y": 61.0},
                    {"x": 3.0, "y": 38.0},
                ],
                "color": [0.9, 0.5, 0.3, 1.0]
            }
        ],
        "options": {
            "title": "Quarterly Sales Comparison",
            "x_label": "Products",
            "y_label": "Units Sold",
            "show_grid": true,
            "show_legend": true
        }
    });

    // Save to file
    let demo_file = "demo_bar_chart.json";
    fs::write(demo_file, serde_json::to_string_pretty(&chart_data)?)?;

    // Render chart
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Chart {
        file: demo_file.to_string(),
        chart_type: "bar".to_string(),
        title: None,
    }).await?;

    Ok(())
}

async fn create_pie_chart_demo(shell: &mut AlchemistShell) -> Result<()> {
    let chart_data = json!({
        "data": [
            {
                "name": "Market Share",
                "data": [
                    {"x": 0.0, "y": 35.0, "label": "Company A"},
                    {"x": 1.0, "y": 25.0, "label": "Company B"},
                    {"x": 2.0, "y": 20.0, "label": "Company C"},
                    {"x": 3.0, "y": 15.0, "label": "Company D"},
                    {"x": 4.0, "y": 5.0, "label": "Others"},
                ]
            }
        ],
        "options": {
            "title": "Market Share Distribution 2024",
            "show_legend": true
        }
    });

    // Save to file
    let demo_file = "demo_pie_chart.json";
    fs::write(demo_file, serde_json::to_string_pretty(&chart_data)?)?;

    // Render chart
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Chart {
        file: demo_file.to_string(),
        chart_type: "pie".to_string(),
        title: None,
    }).await?;

    Ok(())
}

async fn create_combined_report_demo(shell: &mut AlchemistShell) -> Result<()> {
    // Create a markdown report with embedded chart references
    let report_content = r#"# Quarterly Business Report - Q2 2024

## Executive Summary

This quarter has shown significant growth across all key metrics. Our revenue increased by **23%** compared to Q1, while maintaining healthy profit margins.

## Financial Performance

### Revenue Trends

Our revenue has shown consistent growth throughout H1 2024:

- **January**: $1,200 (baseline)
- **June**: $4,900 (+308% growth)
- **Average Monthly Growth**: 32%

*See the line chart visualization for detailed monthly breakdown.*

### Product Performance

Product C continues to be our top performer with 52 units sold in Q1 and 61 units in Q2, representing a **17% quarter-over-quarter growth**.

#### Sales by Product (Units)

| Product | Q1 Sales | Q2 Sales | Growth |
|---------|----------|----------|--------|
| Product A | 45 | 50 | +11% |
| Product B | 38 | 42 | +11% |
| Product C | 52 | 61 | +17% |
| Product D | 41 | 38 | -7% |

*Refer to the bar chart for visual comparison.*

## Market Position

Our company maintains a strong market position with **35%** market share, making us the industry leader. The competitive landscape remains stable with no significant shifts in Q2.

### Market Share Breakdown
- **Our Company**: 35% (Industry Leader)
- **Competitor B**: 25%
- **Competitor C**: 20%
- **Competitor D**: 15%
- **Others**: 5%

*See the pie chart for market share visualization.*

## Key Achievements

1. âœ… Exceeded revenue targets by 15%
2. âœ… Launched new product line successfully
3. âœ… Expanded into 3 new markets
4. âœ… Improved customer satisfaction to 4.8/5

## Challenges & Opportunities

### Challenges
- Product D showing declining sales (-7%)
- Increased competition in emerging markets
- Supply chain disruptions affecting margins

### Opportunities
- Strong demand for Product C presents scaling opportunity
- New market segments showing interest
- Digital transformation initiatives gaining traction

## Next Quarter Outlook

Based on current trends and market analysis, we project:
- **Revenue Growth**: 15-20%
- **Market Share**: Maintain 35%+
- **New Products**: 2 launches planned

## Recommendations

1. **Increase Production** of Product C to meet demand
2. **Investigate** Product D performance issues
3. **Invest** in digital marketing for new markets
4. **Strengthen** supply chain partnerships

---

*Report generated by Alchemist Business Intelligence System*
*Date: July 2024*"#;

    // Save report
    let report_file = "quarterly_report.md";
    fs::write(report_file, report_content)?;

    // Render the report
    shell.handle_render_command(alchemist::render_commands::RenderCommands::Markdown {
        file: report_file.to_string(),
        theme: "light".to_string(),
    }).await?;

    println!("\nCombined report created! The markdown report references the chart data.");
    println!("You can view the charts separately using the other demos.");

    Ok(())
}