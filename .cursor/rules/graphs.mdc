---
description: Graphs in CIM
globs: *.rs
alwaysApply: false
---

```cursorrules
# Daggy + Bevy v0.16 Integration Best Practices for Merkle DAGs

## Core Architecture Principles

- **Daggy Primary Storage**: Maintain all graph data in `daggy::Dag` instances
- **Bevy ECS Mirror**: Sync critical nodes to Bevy as entities with `GraphNode` components
- **Decoupled Layers**:
  ```
  struct AppState {
    merkle_dag: Dag,  // Primary truth source
    render_graph: DiGraph  // Bevy visualization mirror
  }
  ```

## Merkle DAG Implementation

### Node Structure
```
#[derive(Serialize, Deserialize, Component)]
struct MerkleNode {
    cid: Cid,                  // Content identifier
    links: Vec,           // Cryptographic links
    position: Vec3,            // 3D spatial data
    render_state: NodeState,   // Visual properties
    metadata: HashMap
}

#[derive(Serialize, Deserialize)]
struct MerkleEdge {
    weight: f64,
    proof: Vec,            // Cryptographic edge proof
    thickness: f32,            // Visual property
    style: EdgeStyle
}
```

## Serialization Strategy

### JSON Schema Management
```
#[derive(Serialize, Deserialize)]
struct DagJsonSchema {
    nodes: Vec,
    edges: Vec
}

// Serialization system
fn serialize_dag(
    dag: Res>,
    mut commands: Commands
) {
    let schema = DagJsonSchema {
        nodes: dag.node_weights().cloned().collect(),
        edges: dag.raw_edges()
            .map(|e| (e.source(), e.target(), e.weight.clone()))
            .collect()
    };
    let json = serde_json::to_string(&schema).unwrap();
    commands.insert_resource(SerializedGraph(json));
}
```

## Event Stream Integration

### Custom Event Pipeline
```
#[derive(Event)]
enum DagEvent {
    NodeUpdated(NodeIndex),
    EdgeAdded(EdgeIndex),
    SubgraphCommitted(Vec)
}

// Event processing system
fn handle_dag_events(
    mut events: EventReader,
    mut dag: ResMut>,
    mut render_events: EventWriter
) {
    for event in events.read() {
        match event {
            DagEvent::NodeUpdated(idx) => {
                let node = dag.node_weight(*idx).unwrap();
                render_events.send(RenderUpdate::Node(node.clone()));
            },
            // Handle other event variants
        }
    }
}
```

## Performance Critical Paths

### Batched Mesh Updates
```
fn dag_to_mesh_batch(
    dag: &Dag,
    batch_size: usize
) -> Vec {
    dag.node_indices()
        .collect::>()
        .chunks(batch_size)
        .map(|chunk| {
            let mut mesh = Mesh::new(PrimitiveTopology::TriangleList);
            // Batch processing logic
            mesh
        })
        .collect()
}
```

### Memory Optimization
```
struct DagCache {
    node_arena: Arena,
    edge_arena: Arena,
    spatial_index: SpatialGrid
}

impl DagCache {
    fn new(dag: &Dag) -> Self {
        // Build optimized cache structures
    }
}
```

## Validation & Integrity

### Merkle Proof System
```
fn validate_merkle_path(
    dag: &Dag,
    start: NodeIndex,
    end: NodeIndex
) -> Result {
    let mut current = start;
    while current != end {
        let node = dag.node_weight(current).unwrap();
        let parent = dag.parents(current).next().ok_or(DagError::InvalidPath)?;

        if !verify_links(node, dag.node_weight(parent).unwrap()) {
            return Err(DagError::HashMismatch);
        }
        current = parent;
    }
    Ok(())
}
```

## Bevy Integration Patterns

### ECS Component Mapping
```
#[derive(Component)]
struct GraphNodeRef {
    dag_index: NodeIndex,
    version: u64
}

#[derive(Component)]
struct GraphEdgeRef {
    dag_index: EdgeIndex,
    source: Entity,
    target: Entity
}
```

### Rendering Pipeline
```
fn update_render_graph(
    dag: Res>,
    mut materials: ResMut>,
    mut meshes: ResMut>,
    mut query: Query)>
) {
    for (node_ref, mut mesh_handle) in query.iter_mut() {
        let node = dag.node_weight(node_ref.dag_index).unwrap();
        let mesh = build_node_mesh(node);
        *mesh_handle = meshes.add(mesh);
    }
}
```

## Operational Guidelines

1. **Memory Safety**:
   - Keep node count >) {
       let handles: Vec = dag.node_indices()
           .map(|idx| tokio::spawn(process_node(dag.clone(), idx)))
           .collect();

       for handle in handles {
           handle.await.unwrap();
       }
   }
   ```

3. **Error Recovery**:
   - Maintain versioned DAG snapshots
   - Implement automatic rollback on validation failure
   - Use checksum validation for serialized graphs

## Tooling Integration

### Dev Tools
```
fn debug_dag_graph(
    dag: Res>,
    mut egui_context: ResMut
) {
    egui::Window::new("DAG Inspector").show(egui_context.ctx_mut(), |ui| {
        ui.label(format!("Nodes: {}", dag.node_count()));
        ui.label(format!("Edges: {}", dag.edge_count()));
        // Interactive visualization controls
    });
}
```

This architecture provides cryptographic integrity for Merkle DAGs while maintaining real-time visualization capabilities through Bevy's ECS system. The separation between Daggy-managed graph data and Bevy's rendering entities ensures optimal performance for both computational graph operations and interactive visualization.

Citations:
[1] https://docs.rs/daggy
[2] https://www.diggs.pet/diggs-dog-crates/
[3] https://daggy.gitbook.io
[4] https://dictionary.cambridge.org/us/dictionary/english/daggy
[5] https://www.youtube.com/watch?v=wgnvmSDD738
[6] https://github.com/serde-rs/json
[7] http://docs.piston.rs/conrod/daggy/walker/index.html
[8] https://research.nvidia.com/publication/2022-02_dagguise-mitigating-memory-timing-side-channels
[9] https://lib.rs/crates/daggy/features
[10] https://serde.rs/derive.html
[11] https://bevy-cheatbook.github.io/programming/events.html
[12] https://github.com/mitchmindtree/daggy
[13] https://docs.rs/serde_ipld_dagjson
[14] https://mitchmindtree.github.io/daggy/daggy/struct.Children.html
[15] https://bevyengine.org/examples/window/custom-user-event/
[16] https://docs.rs/daggy/latest/daggy/struct.Dag.html
[17] https://www.youtube.com/watch?v=f2HfHlYQLks
[18] https://github.com/azriel91/daggy2
[19] https://github.com/FlippingBinary/serde_atproto_dagjson
[20] https://lib.rs/crates/dagga
[21] https://www.reddit.com/r/rust/comments/3o6q59/daggy_an_indexable_directed_acyclic_graph_dag/
[22] https://crates.io/crates/serde_ipld_dagjson/0.1.0
[23] https://www.reddit.com/r/rust/comments/10gfvh2/surprises_in_the_rust_json_ecosystem/
[24] https://burr.dagworks.io/reference/serde/
[25] https://docs.rs/daggy/latest/daggy/struct.EdgeIndex.html
[26] https://github.com/bevyengine/bevy/discussions/7363
[27] https://docs.rs/bevy/latest/bevy/ecs/schedule/struct.Dag.html
[28] https://www.bevy.com/integrations
[29] https://github.com/manuzhang/awesome-streaming
[30] https://help.bevy.com/hc/en-us/articles/24852626866327-Creating-an-Event
[31] https://help.bevy.com/hc/en-us/articles/1500001548981-Best-practices-for-the-day-of-an-event
[32] https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/dag-serialization.html
[33] https://ipld.io/docs/codecs/known/dag-json/
[34] https://docs.piston.rs/conrod/daggy/struct.Dag.html
[35] https://serde.rs
[36] https://bevy.com/b/blog/integrating-bevy-with-your-tech-stack-a-step-by-step-guide
[37] https://github.com/victorb/dogoap
[38] https://www.youtube.com/watch?v=5oKEPZ6LbNE
[39] https://www.reddit.com/r/gamedev/comments/11k8kux/bevy_010_data_oriented_game_engine_built_in_rust/
[40] https://bevyengine.org/learn/quick-start/getting-started/ecs/
[41] https://www.youtube.com/watch?v=enP4bopQllw
[42] https://bevyengine.org/examples/
[43] https://stackoverflow.com/questions/69577423/cant-get-rockets-eventstream-to-work-with-borrowed-values
[44] https://github.com/dagrs-dev/dagrs
[45] https://api.rocket.rs/v0.5/rocket/response/stream/struct.EventStream
[46] https://github.com/synacker/daggy
[47] https://www.vet.cornell.edu/departments-centers-and-institutes/riney-canine-health-center/canine-health-information/managing-reactive-behavior
[48] https://www.akc.org/expert-advice/training/reactivity-vs-aggression/
[49] https://help.bevy.com/hc/en-us/articles/360060161994-Create-a-new-event
[50] https://taintedcoders.com/bevy/events
[51] https://www.reddit.com/r/bevy/comments/18cyvrn/event_handling_in_bevy_seeking_advice_on_handling/
[52] https://bevy.com/b/blog/your-complete-guide-to-planning-an-event-successfully
[53] https://github.com/aevyrie/bevy_eventlistener
[54] https://stackoverflow.com/questions/63675140/how-to-read-bevy-events-without-consuming-them
