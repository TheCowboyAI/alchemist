warning: implicit autoref creates a reference to the dereference of a raw pointer
   --> bevy-patched/crates/bevy_mikktspace/src/generated.rs:759:25
    |
759 |         bStillSame = if (*pg1).pTriMembers[i] == (*pg2).pTriMembers[i] {
    |                         ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
    = note: `#[warn(dangerous_implicit_autorefs)]` on by default
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
    |
759 |         bStillSame = if (&(*pg1).pTriMembers)[i] == (*pg2).pTriMembers[i] {
    |                         ++                  +

warning: implicit autoref creates a reference to the dereference of a raw pointer
   --> bevy-patched/crates/bevy_mikktspace/src/generated.rs:759:50
    |
759 |         bStillSame = if (*pg1).pTriMembers[i] == (*pg2).pTriMembers[i] {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
    |
759 |         bStillSame = if (*pg1).pTriMembers[i] == (&(*pg2).pTriMembers)[i] {
    |                                                  ++                  +

warning: `bevy_mikktspace` (lib) generated 2 warnings
   Compiling ia v0.1.0 (/git/thecowboyai/alchemist)
warning: unused imports: `alphanumeric1`, `is_not`, `many0`, `preceded`, and `separated_list0`
    --> src/domain/services/graph_import.rs:1531:61
     |
1531 |             bytes::complete::{tag, take_until, take_while1, is_not},
     |                                                             ^^^^^^
1532 |             character::complete::{char, multispace0, multispace1, alphanumeric1},
     |                                                                   ^^^^^^^^^^^^^
1533 |             combinator::{opt, map, recognize},
1534 |             multi::{many0, separated_list0},
     |                     ^^^^^  ^^^^^^^^^^^^^^^
1535 |             sequence::{tuple, delimited, preceded, terminated},
     |                                          ^^^^^^^^
     |
     = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::collections::HashMap`
 --> src/domain/value_objects.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `EventId`
  --> src/infrastructure/event_bridge/subject_router.rs:11:49
   |
11 | use crate::domain::value_objects::{AggregateId, EventId};
   |                                                 ^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> src/infrastructure/event_bridge/event_sequencer.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused imports: `debug` and `info`
 --> src/infrastructure/event_bridge/event_sequencer.rs:7:15
  |
7 | use tracing::{debug, error, info, warn};
  |               ^^^^^         ^^^^

warning: unused import: `crate::presentation::components::*`
  --> src/presentation/plugins/mod.rs:12:5
   |
12 | use crate::presentation::components::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::SystemTime`
  --> src/presentation/plugins/mod.rs:23:5
   |
23 | use std::time::SystemTime;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `graph_import::ImportMapping`
  --> src/presentation/systems/graph_import_processor.rs:14:5
   |
14 |     graph_import::ImportMapping,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SubgraphMember`
  --> src/presentation/systems/graph_import_processor.rs:19:81
   |
19 | use crate::presentation::components::{SubgraphRegion, SubgraphId, BoundaryType, SubgraphMember};
   |                                                                                 ^^^^^^^^^^^^^^

warning: unused import: `HashMap`
  --> src/presentation/systems/subgraph_visualization.rs:11:24
   |
11 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

warning: unused imports: `MouseMotion` and `MouseWheel`
  --> src/presentation/systems/subgraph_visualization.rs:12:26
   |
12 | use bevy::input::mouse::{MouseMotion, MouseWheel};
   |                          ^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Indices` and `PrimitiveTopology`
 --> src/presentation/systems/voronoi_tessellation.rs:4:26
  |
4 | use bevy::render::mesh::{Indices, PrimitiveTopology};
  |                          ^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
    --> src/domain/services/graph_import.rs:2334:29
     |
2334 |         let mut rng = rand::thread_rng();
     |                             ^^^^^^^^^^
     |
     = note: `#[warn(deprecated)]` on by default

warning: unused variable: `url`
  --> src/application/command_handlers/graph_import_handler.rs:33:33
   |
33 |             ImportSource::Url { url } => {
   |                                 ^^^ help: try ignoring the field: `url: _`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `prefix`
  --> src/application/command_handlers/graph_import_handler.rs:53:43
   |
53 |                 let node_id = if let Some(prefix) = &options.id_prefix {
   |                                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_prefix`

warning: unused variable: `options`
   --> src/application/command_handlers/graph_import_handler.rs:108:9
    |
108 |         options: &ImportOptions,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/application/command_handlers/graph_import_handler.rs:120:9
    |
120 |         options: &ImportOptions,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `url`
   --> src/domain/services/graph_import.rs:615:39
    |
615 |     async fn fetch_url_content(&self, url: &str) -> Result<String, DomainError> {
    |                                       ^^^ help: if this is intentional, prefix it with an underscore: `_url`

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
    --> src/domain/services/graph_import.rs:2340:24
     |
2340 |                 x: rng.gen_range(-range..range),
     |                        ^^^^^^^^^

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
    --> src/domain/services/graph_import.rs:2341:24
     |
2341 |                 y: rng.gen_range(-range..range),
     |                        ^^^^^^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
  --> src/presentation/systems/graph_import_processor.rs:68:44
   |
68 | ...                   import_results.send(ImportResultEvent {
   |                                      ^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
   --> src/presentation/systems/graph_import_processor.rs:223:48
    |
223 | ...                   command_events.send(CommandEvent {
    |                                      ^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
   --> src/presentation/systems/graph_import_processor.rs:265:52
    |
265 | ...                   command_events.send(CommandEvent {
    |                                      ^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
   --> src/presentation/systems/graph_import_processor.rs:274:44
    |
274 | ...                   import_results.send(ImportResultEvent {
    |                                      ^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
   --> src/presentation/systems/graph_import_processor.rs:286:44
    |
286 | ...                   import_results.send(ImportResultEvent {
    |                                      ^^^^

warning: use of deprecated method `bevy::prelude::EventWriter::<'w, E>::send`: Use `EventWriter::write` instead.
   --> src/presentation/systems/graph_import_processor.rs:299:36
    |
299 |                     import_results.send(ImportResultEvent {
    |                                    ^^^^

warning: use of deprecated method `bevy::prelude::EntityCommands::<'a>::despawn_recursive`: Use entity.despawn(), which now automatically despawns recursively.
  --> src/presentation/systems/voronoi_tessellation.rs:55:41
   |
55 |                 commands.entity(entity).despawn_recursive();
   |                                         ^^^^^^^^^^^^^^^^^

warning: use of deprecated method `bevy::prelude::Query::<'w, 's, D, F>::get_single_mut`: Please use `single_mut` instead
   --> src/presentation/systems/voronoi_tessellation.rs:138:48
    |
138 |     if let Ok(mut partition) = partition_query.get_single_mut() {
    |                                                ^^^^^^^^^^^^^^

warning: use of deprecated method `bevy::prelude::Query::<'w, 's, D, F>::get_single`: Please use `single` instead
   --> src/presentation/systems/voronoi_tessellation.rs:251:35
    |
251 |     let Ok(partition) = partition.get_single() else {
    |                                   ^^^^^^^^^^

warning: use of deprecated method `bevy::prelude::Query::<'w, 's, D, F>::get_single`: Please use `single` instead
   --> src/presentation/systems/voronoi_tessellation.rs:322:35
    |
322 |     let Ok(partition) = partition.get_single() else {
    |                                   ^^^^^^^^^^

warning: use of deprecated method `bevy::prelude::EntityCommands::<'a>::despawn_recursive`: Use entity.despawn(), which now automatically despawns recursively.
   --> src/presentation/systems/voronoi_tessellation.rs:328:33
    |
328 |         commands.entity(entity).despawn_recursive();
    |                                 ^^^^^^^^^^^^^^^^^

warning: unused variable: `metadata`
   --> src/domain/aggregates/graph.rs:187:51
    |
187 |             GraphCommand::CreateGraph { id, name, metadata } => {
    |                                                   ^^^^^^^^ help: try ignoring the field: `metadata: _`

warning: unused variable: `node_type`
   --> src/domain/aggregates/graph.rs:231:56
    |
231 |             GraphCommand::AddNode { graph_id, node_id, node_type, position, content } => {
    |                                                        ^^^^^^^^^ help: try ignoring the field: `node_type: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:694:44
    |
694 |                 GraphEvent::GraphUpdated { graph_id, name, description } => {
    |                                            ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:713:40
    |
713 |                 NodeEvent::NodeAdded { graph_id, node_id, metadata, position } => {
    |                                        ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:720:42
    |
720 |                 NodeEvent::NodeRemoved { graph_id, node_id } => {
    |                                          ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:725:42
    |
725 |                 NodeEvent::NodeUpdated { graph_id, node_id, new_position, new_content } => {
    |                                          ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:735:40
    |
735 |                 NodeEvent::NodeMoved { graph_id, node_id, old_position, new_position } => {
    |                                        ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `old_position`
   --> src/domain/aggregates/graph.rs:735:59
    |
735 |                 NodeEvent::NodeMoved { graph_id, node_id, old_position, new_position } => {
    |                                                           ^^^^^^^^^^^^ help: try ignoring the field: `old_position: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:740:49
    |
740 |                 NodeEvent::NodeContentChanged { graph_id, node_id, old_content, new_content } => {
    |                                                 ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `old_content`
   --> src/domain/aggregates/graph.rs:740:68
    |
740 |                 NodeEvent::NodeContentChanged { graph_id, node_id, old_content, new_content } => {
    |                                                                    ^^^^^^^^^^^ help: try ignoring the field: `old_content: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:747:44
    |
747 |                 EdgeEvent::EdgeConnected { graph_id, edge_id, source, target, relationship } => {
    |                                            ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:778:42
    |
778 |                 EdgeEvent::EdgeRemoved { graph_id, edge_id } => {
    |                                          ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:781:42
    |
781 |                 EdgeEvent::EdgeUpdated { graph_id, edge_id, new_properties } => {
    |                                          ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `graph_id`
   --> src/domain/aggregates/graph.rs:786:43
    |
786 |                 EdgeEvent::EdgeReversed { graph_id, edge_id, old_source, old_target, new_source, new_target } => {
    |                                           ^^^^^^^^ help: try ignoring the field: `graph_id: _`

warning: unused variable: `old_source`
   --> src/domain/aggregates/graph.rs:786:62
    |
786 |                 EdgeEvent::EdgeReversed { graph_id, edge_id, old_source, old_target, new_source, new_target } => {
    |                                                              ^^^^^^^^^^ help: try ignoring the field: `old_source: _`

warning: unused variable: `old_target`
   --> src/domain/aggregates/graph.rs:786:74
    |
786 |                 EdgeEvent::EdgeReversed { graph_id, edge_id, old_source, old_target, new_source, new_target } => {
    |                                                                          ^^^^^^^^^^ help: try ignoring the field: `old_target: _`

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1151:51
     |
1151 |     fn import_progress_json(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                                   ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1200:53
     |
1200 |     fn import_vocabulary_json(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1334:44
     |
1334 |     fn import_cypher(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: variable `heading_level` is assigned to, but never used
    --> src/domain/services/graph_import.rs:1410:17
     |
1410 |         let mut heading_level = 0;
     |                 ^^^^^^^^^^^^^
     |
     = note: consider using `_heading_level` instead

warning: value assigned to `heading_level` is never read
    --> src/domain/services/graph_import.rs:1416:21
     |
1416 |                     heading_level = level as usize;
     |                     ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?
     = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1707:41
     |
1707 |     fn import_dot(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1838:47
     |
1838 |     fn import_atom_feed(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: unused variable: `mapping`
    --> src/domain/services/graph_import.rs:1977:46
     |
1977 |     fn import_rss_feed(&self, content: &str, mapping: &ImportMapping) -> Result<ImportedGraph, DomainError> {
     |                                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mapping`

warning: unused variable: `max_level`
    --> src/domain/services/graph_import.rs:2282:13
     |
2282 |         let max_level = level_groups.keys().max().copied().unwrap_or(0);
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_level`

warning: unused variable: `line`
    --> src/domain/services/graph_import.rs:2460:32
     |
2460 | fn extract_cypher_relationship(line: &str) -> Option<CypherRelationship> {
     |                                ^^^^ help: if this is intentional, prefix it with an underscore: `_line`

warning: unused variable: `node`
   --> src/presentation/plugins/mod.rs:748:22
    |
748 |         for (entity, node, transform, visibility) in nodes.iter() {
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

warning: unused variable: `subgraph_membership`
   --> src/presentation/systems/graph_import_processor.rs:173:37
    |
173 | ...                   let subgraph_membership = if has_subgraphs {
    |                           ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_subgraph_membership`

warning: unused variable: `color`
   --> src/presentation/systems/subgraph_visualization.rs:144:48
    |
144 | fn create_convex_hull_mesh(positions: &[Vec3], color: Color) -> Mesh {
    |                                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_color`

warning: unused variable: `color`
   --> src/presentation/systems/subgraph_visualization.rs:202:49
    |
202 | fn create_bounding_box_mesh(positions: &[Vec3], color: Color) -> Mesh {
    |                                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_color`

warning: unused variable: `color`
   --> src/presentation/systems/subgraph_visualization.rs:259:52
    |
259 | fn create_circle_boundary_mesh(positions: &[Vec3], color: Color) -> Mesh {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_color`

warning: unused variable: `app`
   --> src/presentation/systems/subgraph_visualization.rs:393:21
    |
393 |     fn build(&self, app: &mut App) {
    |                     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `node_query`
  --> src/presentation/systems/voronoi_tessellation.rs:65:5
   |
65 |     node_query: Query<&Transform, With<GraphNode>>,
   |     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_node_query`

warning: unused variable: `midpoint`
   --> src/presentation/systems/voronoi_tessellation.rs:167:21
    |
167 |                 let midpoint = (*proto + *other_proto) * 0.5;
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_midpoint`

warning: unused variable: `perpendicular`
   --> src/presentation/systems/voronoi_tessellation.rs:171:21
    |
171 |                 let perpendicular = Vec3::new(-direction.z, 0.0, direction.x);
    |                     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_perpendicular`

warning: unused variable: `to_other`
   --> src/presentation/systems/voronoi_tessellation.rs:193:25
    |
193 |                     let to_other = *other_proto - *proto;
    |                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_to_other`

warning: unused variable: `to_vertex`
   --> src/presentation/systems/voronoi_tessellation.rs:194:25
    |
194 |                     let to_vertex = vertex - *proto;
    |                         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_to_vertex`

warning: unused variable: `distance_to_other`
   --> src/presentation/systems/voronoi_tessellation.rs:195:25
    |
195 |                     let distance_to_other = proto.distance(*other_proto);
    |                         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_distance_to_other`

warning: unused variable: `vertex_to_mid`
   --> src/presentation/systems/voronoi_tessellation.rs:199:25
    |
199 |                     let vertex_to_mid = midpoint - vertex;
    |                         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vertex_to_mid`

warning: field `graph` is never read
  --> src/domain/aggregates/graph.rs:86:5
   |
79 | pub struct Graph {
   |            ----- field in this struct
...
86 |     graph: StableGraph<NodeId, EdgeId>,
   |     ^^^^^
   |
   = note: `Graph` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: struct `MermaidNode` is never constructed
    --> src/domain/services/graph_import.rs:2416:8
     |
2416 | struct MermaidNode {
     |        ^^^^^^^^^^^

warning: struct `MermaidEdge` is never constructed
    --> src/domain/services/graph_import.rs:2421:8
     |
2421 | struct MermaidEdge {
     |        ^^^^^^^^^^^

warning: function `extract_mermaid_node` is never used
    --> src/domain/services/graph_import.rs:2465:4
     |
2465 | fn extract_mermaid_node(line: &str) -> Option<MermaidNode> {
     |    ^^^^^^^^^^^^^^^^^^^^

warning: function `extract_mermaid_edge` is never used
    --> src/domain/services/graph_import.rs:2484:4
     |
2484 | fn extract_mermaid_edge(line: &str) -> Option<MermaidEdge> {
     |    ^^^^^^^^^^^^^^^^^^^^

warning: function `apply_simple_layout` is never used
    --> src/domain/services/graph_import.rs:2580:4
     |
2580 | fn apply_simple_layout(nodes: &mut [ImportedNode]) {
     |    ^^^^^^^^^^^^^^^^^^^

warning: fields `sequence` and `aggregate_sequence` are never read
  --> src/infrastructure/event_bridge/event_sequencer.rs:74:5
   |
72 | struct BufferedEvent {
   |        ------------- fields in this struct
73 |     event: DomainEvent,
74 |     sequence: u64,
   |     ^^^^^^^^
75 |     aggregate_sequence: u64,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `BufferedEvent` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `schedule_demo_graph` is never used
   --> src/presentation/plugins/mod.rs:215:4
    |
215 | fn schedule_demo_graph(commands: &mut Commands, graph_id: GraphId, time: &Time) {
    |    ^^^^^^^^^^^^^^^^^^^

warning: function `update_node_positions` is never used
   --> src/presentation/plugins/mod.rs:715:4
    |
715 | fn update_node_positions(
    |    ^^^^^^^^^^^^^^^^^^^^^

warning: function `test_direct_import` is never used
  --> src/presentation/systems/import_system.rs:66:4
   |
66 | fn test_direct_import(
   |    ^^^^^^^^^^^^^^^^^^

warning: function `import_from_clipboard` is never used
   --> src/presentation/systems/import_system.rs:343:4
    |
343 | fn import_from_clipboard(commands: &mut EventWriter<CommandEvent>) {
    |    ^^^^^^^^^^^^^^^^^^^^^

warning: field `subgraph_id` is never read
   --> src/presentation/systems/voronoi_tessellation.rs:366:5
    |
365 | struct VoronoiCellMesh {
    |        --------------- field in this struct
366 |     subgraph_id: SubgraphId,
    |     ^^^^^^^^^^^

warning: `ia` (lib) generated 82 warnings (run `cargo fix --lib -p ia` to apply 12 suggestions)
    Finished `dev` profile [optimized + debuginfo] target(s) in 10.47s
     Running `target/x86_64-unknown-linux-gnu/debug/examples/markdown_import_simple`
=== Markdown Import Demo ===

Controls:
  M - Import markdown file
  Ctrl+D - Cycle through DDD markdown files
  V - Debug: Show node visibility
  ESC - Exit

Import System Ready!
  Press 'I' to import sample graph
  Press Ctrl+J to import JSON
  Press Ctrl+M to import Mermaid
  Press Ctrl+D to import DDD markdown files
  Press Ctrl+C to import from clipboard
  Left-click to import JSON
  Right-click to import Cypher
  Middle-click to import Mermaid
Camera Controls:
Subgraph Controls:
  Ctrl+G - Create subgraph from selected nodes
  B - Toggle boundary type (ConvexHull/BoundingBox/Circle)
Graph created with ID: GraphId(4ace321b-e6c6-4f97-9933-4019d2f288f7)
  Left Mouse + Drag - Orbit camera
  Right Mouse + Drag - Pan camera
  Mouse Wheel - Zoom in/out
  R - Reset camera view
  F - Focus on selection
=== Import System Ready ===
KEYBOARD SHORTCUTS:
  Press 'I' to import sample_graph.json
  Press Space to test keyboard input
  Press Ctrl+I for original import shortcut
  Press Ctrl+M to import Mermaid
  Press Ctrl+D to import DOT

MOUSE SHORTCUTS (if keyboard doesn't work):
  Right-click to import sample_graph.json
  Middle-click to import Mermaid
==========================
handle_domain_events: Processing 1 events
handle_domain_events: Received "GraphCreated"
handle_domain_events: Creating graph visualization

📄 Importing KECO_DDD_Core_Model.md...
✅ Import command sent
process_graph_import_requests: Processing import request for graph GraphId(4ace321b-e6c6-4f97-9933-4019d2f288f7)
process_graph_import_requests: Content loaded, format requested: arrows_app
process_graph_import_requests: First 100 chars of content: # KÉCŌ Capital - Domain-Driven Design Core Model

This document outlines the core domain objects and
process_graph_import_requests: Using import format: ArrowsApp
import_from_content: format = ArrowsApp
import_from_content: first 100 chars = # KÉCŌ Capital - Domain-Driven Design Core Model

This document outlines the core domain objects and
import_from_content: calling import_arrows_app
process_graph_import_requests: Import failed: Validation failed: Invalid Arrows.app JSON: expected value at line 1 column 1
handle_domain_events: Processing 2 events
handle_domain_events: Received "GraphImportRequested"
handle_domain_events: Unhandled event type: "GraphImportRequested"
handle_domain_events: Received "GraphImportCompleted"
handle_domain_events: Unhandled event type: "GraphImportCompleted"

=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== Node Visibility Debug ===
Total nodes in scene: 0
No nodes found in the scene!
=========================


📄 Importing KECO_DDD_Core_Model.md...
✅ Import command sent
process_graph_import_requests: Processing import request for graph GraphId(4ace321b-e6c6-4f97-9933-4019d2f288f7)
process_graph_import_requests: Content loaded, format requested: arrows_app
process_graph_import_requests: First 100 chars of content: # KÉCŌ Capital - Domain-Driven Design Core Model

This document outlines the core domain objects and
process_graph_import_requests: Using import format: ArrowsApp
import_from_content: format = ArrowsApp
import_from_content: first 100 chars = # KÉCŌ Capital - Domain-Driven Design Core Model

This document outlines the core domain objects and
import_from_content: calling import_arrows_app
process_graph_import_requests: Import failed: Validation failed: Invalid Arrows.app JSON: expected value at line 1 column 1
handle_domain_events: Processing 2 events
handle_domain_events: Received "GraphImportRequested"
handle_domain_events: Unhandled event type: "GraphImportRequested"
handle_domain_events: Received "GraphImportCompleted"
handle_domain_events: Unhandled event type: "GraphImportCompleted"

=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== Node Visibility Debug ===
Total nodes in scene: 0
No nodes found in the scene!
=========================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================


=== NODE VISIBILITY REPORT ===
Total nodes: 0
==============================

