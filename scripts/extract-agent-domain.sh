#!/usr/bin/env bash
set -euo pipefail

# Extract Agent Domain Script
# This script extracts agent-related code from cim-domain into cim-domain-agent

echo "=== Extracting Agent Domain ==="

# 1. Create the new agent domain directory structure
echo "Creating cim-domain-agent directory structure..."
mkdir -p cim-domain-agent/{src,tests}
mkdir -p cim-domain-agent/src/{aggregate,commands,events,handlers,projections,queries,value_objects}

# 2. Create Cargo.toml for agent domain
echo "Creating Cargo.toml..."
cat > cim-domain-agent/Cargo.toml << 'EOF'
[package]
name = "cim-domain-agent"
version = "0.1.0"
edition = "2021"

[dependencies]
# Core dependencies
uuid = { version = "1.11", features = ["v4", "serde"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }
thiserror = "2.0"
async-trait = "0.1"

# Domain dependencies
cim-core-domain = { path = "../cim-core-domain" }

# Bevy for ECS integration
bevy = { version = "0.15", default-features = false, features = ["bevy_ecs"] }

[dev-dependencies]
tokio = { version = "1.42", features = ["full"] }
pretty_assertions = "1.4"
EOF

# 3. Create lib.rs
echo "Creating lib.rs..."
cat > cim-domain-agent/src/lib.rs << 'EOF'
//! Agent domain module
//!
//! This module contains all agent-related domain logic including:
//! - Agent aggregate and components
//! - Agent commands and events
//! - Agent command and query handlers

pub mod aggregate;
pub mod commands;
pub mod events;
pub mod handlers;
pub mod projections;
pub mod queries;
pub mod value_objects;

// Re-export main types
pub use aggregate::{
    Agent, AgentMarker, AgentMetadata, AgentStatus, AgentType,
    AuthMethod, AuthenticationComponent, CapabilitiesComponent,
    ConfigurationComponent, PermissionsComponent, ToolAccessComponent,
    ToolDefinition, ToolUsageStats,
};

pub use commands::{
    ActivateAgent, DecommissionAgent, DeployAgent, DisableAgentTools,
    EnableAgentTools, GrantAgentPermissions, RemoveAgentConfiguration,
    RevokeAgentPermissions, SetAgentConfiguration, SetAgentOffline,
    SuspendAgent, UpdateAgentCapabilities,
};

pub use events::{
    AgentActivated, AgentCapabilitiesAdded, AgentCapabilitiesRemoved,
    AgentConfigurationRemoved, AgentConfigurationSet, AgentDecommissioned,
    AgentDeployed, AgentPermissionsGranted, AgentPermissionsRevoked,
    AgentSuspended, AgentToolsDisabled, AgentToolsEnabled, AgentWentOffline,
};

pub use handlers::{AgentCommandHandler, AgentEventHandler};
pub use projections::AgentView;
pub use queries::{AgentQuery, AgentQueryHandler};
EOF

# 4. Move agent aggregate
echo "Moving agent aggregate..."
mv cim-domain/src/agent.rs cim-domain-agent/src/aggregate/mod.rs

# 5. Extract agent commands
echo "Extracting agent commands..."
cat > cim-domain-agent/src/commands/mod.rs << 'EOF'
//! Agent command definitions

use cim_core_domain::command::Command;
use uuid::Uuid;
use std::collections::HashSet;
use serde_json::Value;

/// Deploy a new agent
#[derive(Debug, Clone)]
pub struct DeployAgent {
    /// Agent's unique ID (generated by caller)
    pub id: Uuid,
    /// Agent type
    pub agent_type: crate::AgentType,
    /// Owner ID (person or organization)
    pub owner_id: Uuid,
    /// Agent metadata
    pub metadata: crate::AgentMetadata,
}

impl Command for DeployAgent {
    type Aggregate = crate::Agent;
}

/// Activate an agent
#[derive(Debug, Clone)]
pub struct ActivateAgent {
    /// Agent ID
    pub id: Uuid,
}

impl Command for ActivateAgent {
    type Aggregate = crate::Agent;
}

/// Suspend an agent
#[derive(Debug, Clone)]
pub struct SuspendAgent {
    /// Agent ID
    pub id: Uuid,
    /// Reason for suspension
    pub reason: String,
}

impl Command for SuspendAgent {
    type Aggregate = crate::Agent;
}

/// Set agent offline
#[derive(Debug, Clone)]
pub struct SetAgentOffline {
    /// Agent ID
    pub id: Uuid,
}

impl Command for SetAgentOffline {
    type Aggregate = crate::Agent;
}

/// Decommission an agent
#[derive(Debug, Clone)]
pub struct DecommissionAgent {
    /// Agent ID
    pub id: Uuid,
}

impl Command for DecommissionAgent {
    type Aggregate = crate::Agent;
}

/// Update agent capabilities
#[derive(Debug, Clone)]
pub struct UpdateAgentCapabilities {
    /// Agent ID
    pub id: Uuid,
    /// Capabilities to add
    pub add_capabilities: Vec<String>,
    /// Capabilities to remove
    pub remove_capabilities: Vec<String>,
}

impl Command for UpdateAgentCapabilities {
    type Aggregate = crate::Agent;
}

/// Grant permissions to an agent
#[derive(Debug, Clone)]
pub struct GrantAgentPermissions {
    /// Agent ID
    pub id: Uuid,
    /// Permissions to grant
    pub permissions: HashSet<String>,
}

impl Command for GrantAgentPermissions {
    type Aggregate = crate::Agent;
}

/// Revoke permissions from an agent
#[derive(Debug, Clone)]
pub struct RevokeAgentPermissions {
    /// Agent ID
    pub id: Uuid,
    /// Permissions to revoke
    pub permissions: HashSet<String>,
}

impl Command for RevokeAgentPermissions {
    type Aggregate = crate::Agent;
}

/// Enable tools for an agent
#[derive(Debug, Clone)]
pub struct EnableAgentTools {
    /// Agent ID
    pub id: Uuid,
    /// Tool definitions to enable
    pub tools: Vec<crate::ToolDefinition>,
}

impl Command for EnableAgentTools {
    type Aggregate = crate::Agent;
}

/// Disable tools for an agent
#[derive(Debug, Clone)]
pub struct DisableAgentTools {
    /// Agent ID
    pub id: Uuid,
    /// Tool names to disable
    pub tool_names: Vec<String>,
}

impl Command for DisableAgentTools {
    type Aggregate = crate::Agent;
}

/// Set agent configuration
#[derive(Debug, Clone)]
pub struct SetAgentConfiguration {
    /// Agent ID
    pub id: Uuid,
    /// Configuration key
    pub key: String,
    /// Configuration value
    pub value: Value,
}

impl Command for SetAgentConfiguration {
    type Aggregate = crate::Agent;
}

/// Remove agent configuration
#[derive(Debug, Clone)]
pub struct RemoveAgentConfiguration {
    /// Agent ID
    pub id: Uuid,
    /// Configuration key to remove
    pub key: String,
}

impl Command for RemoveAgentConfiguration {
    type Aggregate = crate::Agent;
}
EOF

# 6. Extract agent events
echo "Extracting agent events..."
# This will be done by parsing the events.rs file

# 7. Create handlers directory files
echo "Creating handler files..."
cat > cim-domain-agent/src/handlers/mod.rs << 'EOF'
//! Agent command and event handlers

mod command_handler;
mod event_handler;

pub use command_handler::AgentCommandHandler;
pub use event_handler::AgentEventHandler;
EOF

# 8. Create projections
echo "Creating projections..."
cat > cim-domain-agent/src/projections/mod.rs << 'EOF'
//! Agent projections and read models

use serde::{Deserialize, Serialize};
use uuid::Uuid;
use std::collections::{HashMap, HashSet};

/// Read model view of an agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentView {
    /// Agent ID
    pub id: Uuid,
    /// Agent type
    pub agent_type: crate::AgentType,
    /// Current status
    pub status: crate::AgentStatus,
    /// Owner ID
    pub owner_id: Uuid,
    /// Agent name
    pub name: String,
    /// Description
    pub description: String,
    /// Capabilities
    pub capabilities: HashSet<String>,
    /// Permissions
    pub permissions: HashSet<String>,
    /// Enabled tools
    pub enabled_tools: Vec<String>,
    /// Configuration
    pub configuration: HashMap<String, serde_json::Value>,
    /// Tags
    pub tags: HashSet<String>,
    /// Creation timestamp
    pub created_at: chrono::DateTime<chrono::Utc>,
    /// Last activity
    pub last_active: Option<chrono::DateTime<chrono::Utc>>,
    /// Version
    pub version: u64,
}
EOF

# 9. Create queries
echo "Creating queries..."
cat > cim-domain-agent/src/queries/mod.rs << 'EOF'
//! Agent query definitions

use uuid::Uuid;
use cim_core_domain::query::Query;

/// Query for agent information
#[derive(Debug, Clone)]
pub enum AgentQuery {
    /// Get agent by ID
    GetById(Uuid),
    /// Get agents by owner
    GetByOwner(Uuid),
    /// Get agents by type
    GetByType(crate::AgentType),
    /// Get agents by status
    GetByStatus(crate::AgentStatus),
    /// Get agents with capability
    GetByCapability(String),
}

impl Query for AgentQuery {
    type Result = Vec<crate::projections::AgentView>;
}

/// Agent query handler
pub struct AgentQueryHandler<R> {
    read_model: R,
}

impl<R> AgentQueryHandler<R> {
    /// Create a new query handler
    pub fn new(read_model: R) -> Self {
        Self { read_model }
    }
}
EOF

# 10. Create value_objects module
echo "Creating value objects..."
cat > cim-domain-agent/src/value_objects/mod.rs << 'EOF'
//! Agent value objects

// Value objects are defined in the aggregate module
// This module can be extended with additional value objects as needed
EOF

# 11. Create basic tests
echo "Creating tests..."
cat > cim-domain-agent/tests/agent_tests.rs << 'EOF'
//! Agent domain tests

use cim_domain_agent::*;
use uuid::Uuid;

#[test]
fn test_create_agent() {
    let agent_id = Uuid::new_v4();
    let owner_id = Uuid::new_v4();

    let agent = Agent::new(agent_id, AgentType::AI, owner_id);

    assert_eq!(agent.id(), agent_id);
    assert_eq!(agent.agent_type(), AgentType::AI);
    assert_eq!(agent.status(), AgentStatus::Initializing);
    assert_eq!(agent.owner_id(), owner_id);
}

#[test]
fn test_agent_activation() {
    let agent_id = Uuid::new_v4();
    let owner_id = Uuid::new_v4();

    let mut agent = Agent::new(agent_id, AgentType::System, owner_id);

    // Should be able to activate from initializing state
    assert!(agent.activate().is_ok());
    assert_eq!(agent.status(), AgentStatus::Active);

    // Should not be able to activate when already active
    assert!(agent.activate().is_err());
}
EOF

# 12. Initialize git repository
echo "Initializing git repository..."
cd cim-domain-agent
git init
git add .
git commit -m "Initial commit: Agent domain extracted from cim-domain"

# 13. Add remote (will be created separately)
echo "Repository ready. Create GitHub repository and run:"
echo "  cd cim-domain-agent"
echo "  git remote add origin https://github.com/TheCowboyAI/cim-domain-agent.git"
echo "  git push -u origin main"

echo "=== Agent domain extraction complete ==="
