#!/usr/bin/env bash
set -euo pipefail

# Script to extract organization domain from cim-domain

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check we're in the right directory
if [ ! -f "Cargo.toml" ] || [ ! -d "cim-domain" ]; then
    print_error "This script must be run from the alchemist repository root"
    exit 1
fi

# Create temporary directory for the new module
TEMP_DIR=$(mktemp -d)
print_status "Working in temporary directory: $TEMP_DIR"

# Clone the repository
cd "$TEMP_DIR"
git clone https://github.com/TheCowboyAI/cim-domain-organization.git
cd cim-domain-organization

# Create directory structure
mkdir -p src/{aggregate,commands,events,handlers,projections,queries,value_objects}

# Create Cargo.toml
cat > Cargo.toml << 'EOF'
[package]
name = "cim-domain-organization"
version = "0.1.0"
edition = "2021"

[dependencies]
# Core dependencies
cim-core-domain = { path = "../cim-core-domain" }
uuid = { version = "1.11", features = ["v4", "serde"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }
thiserror = "2.0"

# Bevy dependencies (optional)
bevy_ecs = { version = "0.16", optional = true }

[features]
default = []
bevy = ["bevy_ecs"]

[dev-dependencies]
tokio = { version = "1.42", features = ["full"] }
EOF

# Create lib.rs
cat > src/lib.rs << 'EOF'
//! Organization domain for CIM
//!
//! This module contains all organization-related domain logic including:
//! - Organization aggregate and components
//! - Organization commands and events
//! - Organization command and query handlers

pub mod aggregate;
pub mod commands;
pub mod events;
pub mod handlers;
pub mod projections;
pub mod queries;
pub mod value_objects;

// Re-export main types
pub use aggregate::*;
pub use commands::*;
pub use events::*;
pub use handlers::*;
pub use projections::*;
pub use queries::*;
pub use value_objects::*;
EOF

# Copy organization.rs to aggregate/mod.rs
print_status "Extracting organization aggregate..."
cp /git/thecowboyai/alchemist/cim-domain/src/organization.rs src/aggregate/mod.rs

# Extract organization-related commands
print_status "Extracting organization commands..."
cat > src/commands/mod.rs << 'EOF'
//! Organization-related commands

use cim_core_domain::{Command, EntityId};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use crate::value_objects::{OrganizationType, OrganizationRole};

/// Create a new organization
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CreateOrganization {
    /// Organization's unique ID (generated by caller)
    pub organization_id: Uuid,
    /// Name of the organization
    pub name: String,
    /// Type of organization
    pub org_type: OrganizationType,
    /// Parent organization ID (if this is a sub-organization)
    pub parent_id: Option<Uuid>,
    /// Primary location ID
    pub primary_location_id: Option<Uuid>,
}

impl Command for CreateOrganization {
    type Aggregate = crate::aggregate::Organization;

    fn aggregate_id(&self) -> Option<EntityId<Self::Aggregate>> {
        Some(EntityId::from_uuid(self.organization_id))
    }
}

/// Add a member to an organization
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AddOrganizationMember {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person ID to add as member
    pub person_id: Uuid,
    /// Role to assign
    pub role: OrganizationRole,
    /// Who this person reports to (if applicable)
    pub reports_to: Option<Uuid>,
}

impl Command for AddOrganizationMember {
    type Aggregate = crate::aggregate::Organization;

    fn aggregate_id(&self) -> Option<EntityId<Self::Aggregate>> {
        Some(EntityId::from_uuid(self.organization_id))
    }
}
EOF

# Extract organization events
print_status "Extracting organization events..."
# This would extract OrganizationCreated, OrganizationMemberAdded, etc.

# Extract organization handlers
print_status "Extracting organization handlers..."
# This would extract OrganizationCommandHandler

# Extract organization queries
print_status "Extracting organization queries..."
# This would extract OrganizationView, GetOrganizationHierarchy, etc.

# Extract value objects
print_status "Extracting organization value objects..."
# This would extract OrganizationType, OrganizationStatus, OrganizationRole, etc.

# Create README
cat > README.md << 'EOF'
# CIM Domain - Organization

Organization bounded context for the Composable Information Machine.

## Overview

This module contains all organization-related domain logic including:
- Organization aggregate with hierarchical structure
- Organization membership and roles
- Organization metadata and status
- Command and query handlers for organization operations

## Usage

```rust
use cim_domain_organization::{
    Organization, CreateOrganization, OrganizationType,
    OrganizationCommandHandler
};

// Create a new organization
let cmd = CreateOrganization {
    organization_id: Uuid::new_v4(),
    name: "Acme Corp".to_string(),
    org_type: OrganizationType::Company,
    parent_id: None,
    primary_location_id: None,
};

// Process through command handler
handler.handle(cmd).await?;
```

## Features

- `bevy`: Enable Bevy ECS integration

## License

See the main CIM repository for license information.
EOF

# Initialize git and commit
git init
git add .
git commit -m "Initial organization domain extraction from cim-domain"

# Push to GitHub
git remote add origin https://github.com/TheCowboyAI/cim-domain-organization.git
git push -u origin main

print_status "Organization domain extracted successfully!"
print_status "Repository created at: https://github.com/TheCowboyAI/cim-domain-organization"

# Return to original directory
cd /git/thecowboyai/alchemist

# Remove organization from cim-domain and add as submodule
print_status "Adding organization domain as submodule..."
git rm -rf cim-domain-organization 2>/dev/null || true
git submodule add https://github.com/TheCowboyAI/cim-domain-organization.git cim-domain-organization

print_status "Organization domain extraction complete!"
