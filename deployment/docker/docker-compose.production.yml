version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: alchemist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: alchemist
      POSTGRES_USER: alchemist
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - alchemist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alchemist"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: alchemist-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - alchemist-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # NATS Server with JetStream
  nats:
    image: nats:2.10-alpine
    container_name: alchemist-nats
    restart: unless-stopped
    command: 
      - "-js"
      - "-sd"
      - "/data"
      - "--max_payload"
      - "8MB"
      - "--max_connections"
      - "10000"
      - "--tls"
      - "--tlscert=/certs/server-cert.pem"
      - "--tlskey=/certs/server-key.pem"
      - "--tlsverify"
      - "--tlscacert=/certs/ca.pem"
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    volumes:
      - nats_data:/data
      - ./certs:/certs:ro
    networks:
      - alchemist-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Ollama for AI model serving
  ollama:
    image: ollama/ollama:latest
    container_name: alchemist-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - alchemist-network
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MODELS=/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Alchemist Agent
  alchemist:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      cache_from:
        - alchemist:latest
        - alchemist:cache
    image: alchemist:latest
    container_name: alchemist-agent
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - alchemist-network
    volumes:
      - ./configs/production:/config:ro
      - ./certs:/etc/alchemist/certs:ro
      - alchemist_data:/var/lib/alchemist
    environment:
      - RUST_LOG=${LOG_LEVEL:-warn}
      - RUST_BACKTRACE=1
      - AGENT_ID=${AGENT_ID:-alchemist-prod-001}
      - DATABASE_URL=postgresql://alchemist:${POSTGRES_PASSWORD}@postgres:5432/alchemist?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8080:8080"   # Main service
      - "8081:8081"   # Health check
      - "9090:9090"   # Metrics
    healthcheck:
      test: ["CMD", "/app/alchemist", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: alchemist-nginx
    restart: unless-stopped
    depends_on:
      - alchemist
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - alchemist-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: alchemist-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - alchemist-network
    ports:
      - "9091:9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: alchemist-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    networks:
      - alchemist-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: alchemist-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - alchemist-network
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP

networks:
  alchemist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  ollama_data:
    driver: local
  alchemist_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local