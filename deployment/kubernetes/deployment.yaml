apiVersion: apps/v1
kind: Deployment
metadata:
  name: alchemist
  namespace: alchemist
  labels:
    app: alchemist
    component: agent
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: alchemist
      component: agent
  template:
    metadata:
      labels:
        app: alchemist
        component: agent
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: alchemist
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: alchemist
        image: alchemist:latest
        imagePullPolicy: Always
        command: ["/scripts/startup.sh"]
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: health
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AI_PROVIDER
          value: "anthropic"
        - name: LOG_LEVEL
          value: "warn"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: alchemist-secrets
              key: anthropic-api-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: alchemist-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: alchemist-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: alchemist-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: scripts
          mountPath: /scripts
          readOnly: true
        - name: certs
          mountPath: /etc/alchemist/certs
          readOnly: true
        - name: nats-creds
          mountPath: /etc/nats
          readOnly: true
        - name: data
          mountPath: /var/lib/alchemist
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: alchemist-config
      - name: scripts
        configMap:
          name: alchemist-scripts
          defaultMode: 0755
      - name: certs
        secret:
          secretName: alchemist-tls
      - name: nats-creds
        secret:
          secretName: nats-credentials
      - name: data
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - alchemist
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: alchemist
            component: agent