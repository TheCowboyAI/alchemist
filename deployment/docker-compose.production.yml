version: '3.8'

services:
  alchemist:
    image: alchemist:latest
    container_name: alchemist-prod
    environment:
      - RUST_LOG=warn
      - ALCHEMIST_CONFIG=/etc/alchemist/config.toml
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ALCHEMIST_JWT_SECRET=${ALCHEMIST_JWT_SECRET}
      - ALCHEMIST_API_KEY=${ALCHEMIST_API_KEY}
    volumes:
      - ./configs/production/alchemist.toml:/etc/alchemist/config.toml:ro
      - ./certs:/etc/alchemist/certs:ro
      - alchemist-data:/var/lib/alchemist
    ports:
      - "8080:8080"     # Main API
      - "9090:9090"     # Metrics
      - "8081:8081"     # Health check
    depends_on:
      - nats
      - redis
      - postgres
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  nats:
    image: nats:2.10-alpine
    container_name: nats-prod
    command: 
      - "--js"
      - "--sd=/data"
      - "--tls"
      - "--tlscert=/certs/server-cert.pem"
      - "--tlskey=/certs/server-key.pem"
      - "--tlscacert=/certs/ca-cert.pem"
    volumes:
      - nats-data:/data
      - ./certs/nats:/certs:ro
    ports:
      - "4222:4222"
      - "8222:8222"     # HTTP monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nats", "account", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    environment:
      - POSTGRES_DB=alchemist
      - POSTGRES_USER=alchemist
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alchemist"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant-prod
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      - QDRANT__TLS__ENABLE=true
      - QDRANT__TLS__CERT=/certs/cert.pem
      - QDRANT__TLS__KEY=/certs/key.pem
    volumes:
      - qdrant-data:/qdrant
      - ./certs/qdrant:/certs:ro
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger-prod
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    ports:
      - "4317:4317"     # OTLP gRPC
      - "4318:4318"     # OTLP HTTP
      - "16686:16686"   # Jaeger UI
    restart: unless-stopped
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-prod
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs/nginx:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - alchemist

volumes:
  alchemist-data:
    driver: local
  nats-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  qdrant-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: alchemist-prod
    driver: bridge